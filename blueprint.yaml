blueprint:
  name: VW ID.Buzz Camping Mode Control
  description: >
    Automatic camping mode control for VW ID.Buzz vehicle climate system.
    Starts climate at set time if battery level is sufficient, stops on low battery,
    and restarts after delay.
    
    **Version:** 1.0.0 | **Minimum HA:** 2024.6.0
    
    ‚ö†Ô∏è **CRITICAL REQUIREMENT:**
    This blueprint requires Volkswagen Car-Net integration installed via HACS!
    Install first: https://github.com/robinostlund/homeassistant-volkswagencarnet
    
    **Required before import:**
    1. üöó Install & configure VW Car-Net integration (HACS)
    2. üîß Create required helper entities (see documentation)
    3. üìñ Full setup guide: https://github.com/jhron/habptest1#required-entities
    
    Required helpers:
    - Vehicle battery level sensor (from VW Car-Net)
    - Climate control switch/device (from VW Car-Net)
    - Input datetime helpers for start/end times
    - Input boolean helpers for mode control
    - Input number helpers for battery limit and delay
    - Timer helper for delay control
  domain: automation
  author: "VW Camping Blueprint"
  homeassistant:
    min_version: "2024.6.0"
  source_url: "https://github.com/jhron/habptest1"
  input:
    # Vehicle sensors and controls
    vehicle_config:
      name: "üöô Vehicle Configuration"
      description: "Configure your VW ID.Buzz sensors and climate control"
      icon: mdi:car-electric
      collapsed: false
      input:
        battery_sensor:
          name: Battery Level Sensor
          description: "Vehicle battery level sensor from VW Car-Net integration (e.g., sensor.id_buzz_battery_level)"
          selector:
            entity:
              filter:
                - domain: sensor
                  device_class: battery
                  integration: volkswagencarnet
        climate_device_id:
          name: Climate Control Device ID
          description: "VW ID.Buzz device from Car-Net integration (select your vehicle device)"
          selector:
            device:
              filter:
                - integration: volkswagencarnet
        climate_entity_id:
          name: Climate Control Entity ID
          description: "Climate control switch from VW Car-Net (e.g., switch.id_buzz_climatisation)"
          selector:
            entity:
              filter:
                - domain: switch
                  integration: volkswagencarnet
                - domain: climate
                  integration: volkswagencarnet

    # Time configuration
    time_config:
      name: "‚è∞ Time Settings"
      description: "Configure start and end times for camping mode"
      icon: mdi:clock-outline
      collapsed: false
      input:
        start_time:
          name: Start Time Helper
          description: "Input datetime for automatic climate start time"
          selector:
            entity:
              filter:
                domain: input_datetime
        end_time:
          name: End Time Helper
          description: "Input datetime for automatic climate end time"
          selector:
            entity:
              filter:
                domain: input_datetime

    # Boolean controls
    boolean_config:
      name: "üîò Boolean Controls"
      description: "Input boolean helpers for mode control"
      icon: mdi:toggle-switch
      collapsed: true
      input:
        auto_camping_mode:
          name: Auto Camping Mode
          description: "Boolean to enable/disable automatic camping mode"
          selector:
            entity:
              filter:
                domain: input_boolean
        auto_start_mode:
          name: Auto Start Mode
          description: "Boolean to enable automatic climate start at scheduled time"
          selector:
            entity:
              filter:
                domain: input_boolean
        auto_end_mode:
          name: Auto End Mode
          description: "Boolean to enable automatic climate end at scheduled time"
          selector:
            entity:
              filter:
                domain: input_boolean

    # Number settings
    number_config:
      name: "üî¢ Number Settings"
      description: "Configure battery limits and delay settings"
      icon: mdi:numeric
      collapsed: true
      input:
        battery_limit:
          name: Battery Limit
          description: "Input number for minimum battery level (%)"
          selector:
            entity:
              filter:
                domain: input_number
        delay_minutes:
          name: Delay Minutes
          description: "Input number for restart delay in minutes"
          selector:
            entity:
              filter:
                domain: input_number

    # Timer configuration
    timer_config:
      name: "‚è≤Ô∏è Timer Configuration"
      description: "Timer helper for camping mode delay"
      icon: mdi:timer-outline
      collapsed: true
      input:
        delay_timer:
          name: Delay Timer
          description: "Timer helper for camping mode delay control"
          selector:
            entity:
              filter:
                domain: timer

triggers:
  - trigger: time
    at: !input start_time
    id: timeStart
  - trigger: time
    at: !input end_time
    id: timeEnd
  - trigger: state
    entity_id:
      - !input battery_sensor
    id: batteryLevel
  - type: turned_off
    device_id: !input climate_device_id
    entity_id: !input climate_entity_id
    domain: switch
    trigger: device
    id: climatisationOff
  - trigger: event
    event_type: timer.finished
    event_data:
      entity_id: !input delay_timer
    id: timerFinished

conditions: []

actions:
  - choose:
      # Start time trigger - turn on climate if conditions are met
      - conditions:
          - condition: trigger
            id:
              - timeStart
          - condition: state
            entity_id: !input auto_camping_mode
            state: "on"
          - condition: template
            value_template: |-
              {{ states(battery_limit) | float <
                states(battery_sensor) | float }}
        sequence:
          - action: input_boolean.turn_on
            metadata: {}
            data: {}
            target:
              entity_id: !input auto_start_mode
          - type: turn_on
            device_id: !input climate_device_id
            entity_id: !input climate_entity_id
            domain: switch

      # End time trigger - turn off climate and reset modes
      - conditions:
          - condition: trigger
            id:
              - timeEnd
          - condition: state
            entity_id: !input auto_end_mode
            state: "on"
        sequence:
          - action: input_boolean.turn_off
            metadata: {}
            data: {}
            target:
              entity_id:
                - !input auto_start_mode
                - !input auto_camping_mode
                - !input auto_end_mode
          - type: turn_off
            device_id: !input climate_device_id
            entity_id: !input climate_entity_id
            domain: switch
          - action: timer.finish
            metadata: {}
            data: {}
            target:
              entity_id: !input delay_timer

      # Battery level trigger - turn off when battery is low
      - conditions:
          - condition: trigger
            id:
              - batteryLevel
          - condition: state
            entity_id: !input auto_start_mode
            state: "on"
          - condition: template
            value_template: |-
              {{ states(battery_limit) | float >=
                states(battery_sensor) | float }}
        sequence:
          - action: input_boolean.turn_off
            metadata: {}
            data: {}
            target:
              entity_id:
                - !input auto_camping_mode
                - !input auto_end_mode
                - !input auto_start_mode
          - action: timer.finish
            metadata: {}
            data: {}
            target:
              entity_id: !input delay_timer
          - type: turn_off
            device_id: !input climate_device_id
            entity_id: !input climate_entity_id
            domain: switch

      # Climate turned off manually - start delay timer if conditions are met
      - conditions:
          - condition: trigger
            id:
              - climatisationOff
          - condition: state
            entity_id: !input auto_start_mode
            state: "on"
          - condition: template
            value_template: >-
              {{ states(battery_limit) | float <
              states(battery_sensor) | float }}
        sequence:
          - action: timer.start
            metadata: {}
            data:
              duration: "{{ states(delay_minutes) | int(0) * 60 }}"
            target:
              entity_id: !input delay_timer

      # Timer finished - restart climate if conditions are still met
      - conditions:
          - condition: trigger
            id:
              - timerFinished
          - condition: state
            entity_id: !input auto_start_mode
            state: "on"
          - condition: template
            value_template: >-
              {{ states(battery_limit) | float <
              states(battery_sensor) | float }}
        sequence:
          - type: turn_on
            device_id: !input climate_device_id
            entity_id: !input climate_entity_id
            domain: switch

mode: single
